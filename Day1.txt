# Docker-Education Day1.
### 도커 컨테이너가 좋은 이유.
도커 컨테이너에를 설명하기 전, 애플리케이션 개발 후 실제 배포의 방법에 대해 생각해보자.
1. 개발환경을 특정 OS 기반으로 구축한다.
2. 소스코드를 작성하여 애플리케이션을 개발한다.
3. 개발서버에서 애플리케이션이 정상적으로 구동되는지 확인한다.
4. 운영서버에 배포한다.
- 위와같은 방법은 매우 간단해보이지만, 생각보다 예외 상황이 많이 발생하여 운영서버에 깔끔하게 배포되지 않는 경우가 많다.
- 다양한 경우가 존재하겠지만, 가장 큰 이유는 개발환경 - 운영환경 간의 OS 의존성 / 설정의 차이가 가장 크다.
- 따라서 운영자는 아래와 같은 요청을 정말 많이 받는다.
- "개발서버는 잘되는데 운영서버에서는 안되요... 뭔지는 모르겠는데 그냥 점검해주세요."
- 도커를 사용하면 위와같은 난감한 상황을 막을 수 있다.
- 그 이유는 도커는 해당 애플리케이션 실행에 필요한 모든 의존성을 기존 OS와 격리하여 이미지로 만들기에,
- **OS에서 자체 제공하는 의존성과 애플리케이션에 필요한 의존성을 완벽하게 분리할 수 있기 때문이다.**
- 이러한 의존성 분리의 첫 단계로써 도커에서 사용하는 리눅스 자체 기술인 chroot에 대해 알아보며 , 도커 격리 기술에 대해 하나하나 알아보자.
### chroot를 이용하여 bash shell 프로그램만을 위한 root directroy 구축하기.

#### chroot 설명

리눅스는 root filesystem 구조를 가지고있다. 즉 파일시스템의 최상위 경로는 "/" ( root )이다.
이때 리눅스에서 자체 제공하는 chroot라는 기술을 통해 현재 실행중인 프로세스와 자녀 프로세스의 루트 디렉토리를 변경하여 그 상위 디렉토리에 접근이 불가하도록 변경할 수 있다.

chroot를 이용하여 특정 프로세스 및 자녀프로세스의 root디렉토리를 변경하여 상위 디렉토리에 접근이 불가하게 만듬으로써, 파일시스템단의 격리를 구현할 수 있다.
- 리눅스는 root filesystem 구조를 가지고있다. 즉 파일시스템의 최상위 경로는 "/" ( root )이다.
- 이때 리눅스에서 자체 제공하는 chroot라는 기술을 통해 현재 실행중인 프로세스와 자녀 프로세스의 루트 디렉토리를 변경하여 그 상위 디렉토리에 접근이 불가하도록 변경할 수 있다.
- chroot를 이용하여 특정 프로세스 및 자녀프로세스의 root디렉토리를 변경하여 상위 디렉토리에 접근이 불가하게 만듬으로써, 파일시스템단의 격리를 구현할 수 있다.

#### chroot 실습

- /root/newroot를 "/" 처럼 보이도록 세팅하고, 실제 chroot를 이용하여 격리된 bash를 사용해보자.
```bash
# /root/newroot 디렉토리 및 의존성파일을 저장할 디렉퇼 생성
mkdir -p /root/newroot/{bin,lib,lib64}
mkdir -p /root/newroot/lib/x86_64-linux-gnu/
# /bin/bash를 /root/newroot/bin으로 이동
root@docker1:~# cp /bin/bash ~/newroot/bin/
# /bin/bash 명령어 실행에 필요한 의존성 파일 확인
ldd /bin/bash
        linux-vdso.so.1 (0x00007fffd833a000)
        libtinfo.so.5 => /lib/x86_64-linux-gnu/libtinfo.so.5 (0x00007f1c1e203000)
        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f1c1dfff000)
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f1c1dc0e000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f1c1e747000)